# -*- coding: utf-8 -*-
"""Task4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xwKEYayuXfboQZpmG9N5uqFCPQVToBsk
"""

import keras
import tensorflow as tf
from keras.datasets import mnist
from tensorflow.keras import backend as K
from keras.utils import np_utils
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten, Activation
from keras.layers import Conv2D, MaxPooling2D
from sklearn.metrics import confusion_matrix , classification_report
import numpy as np
import pandas as pd

"""Load Data and split it to train and test"""

(train_X, train_Y), (test_X, test_Y) = mnist.load_data()
train_X = train_X.reshape(train_X.shape[0], 28, 28, 1)
test_X = test_X.reshape(test_X.shape[0], 28, 28, 1)

"""scaling(from 0 to 1)"""

train_X = train_X.astype('float32')

test_X = test_X.astype('float32')

train_X /= 255

test_X /= 255

"""One Hot Encoder"""

train_Y =keras.utils.np_utils.to_categorical(train_Y, 10)

test_Y = keras.utils.np_utils.to_categorical(test_Y, 10)

"""model"""

model = Sequential()

model.add(Conv2D(32, (3, 3), input_shape=(28,28,1)))
model.add(Activation('relu'))
model.add(Conv2D(32, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Conv2D(64,(3, 3)))
model.add(Activation('relu'))
model.add(Conv2D(64, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Flatten())
model.add(Dense(512))
model.add(Activation('relu'))
model.add(Dropout(0.2))
model.add(Dense(10))

model.add(Activation('softmax'))


model.compile(loss=keras.losses.categorical_crossentropy,
              optimizer=tf.optimizers.Adam(learning_rate=0.001),
              metrics=['accuracy'])


model.fit(train_X, train_Y,
          batch_size=64,
          epochs=20,
          validation_data=(test_X, test_Y)
          )

"""Accuracy"""

print('accuracy:', (model.evaluate(test_X, test_Y))[1])

"""Return labels to numbers 0 , 1 , 2 ,...."""

test = np.argmax(test_Y,axis=1)
pred = np.argmax(model.predict(test_X),axis=1)

"""confusion_matrix"""

cm = np.zeros((10,10))
for i in range(0,len(test)):
    cm[test[i]][pred[i]] +=1
print(pd.DataFrame(np.round(cm)))

"""confusion_matrix (built in)"""

cm = confusion_matrix(test,pred)
print(cm)

"""Recall"""

Recall = np.zeros((10,1))
j = 0
for i in range(0,10):
     Recall[i][0] = cm[i][j] / np.sum(cm[i,:])
     j+=1
    
print(np.round(Recall,2))

"""Precision"""

Precision = np.zeros((10,1))
j = 0
for i in range(0,10):
     Precision[i][0] = cm[i][j] / np.sum(cm[:,i])
     j+=1
    
print(np.round(Precision,2))

"""F1 score"""

F1_score = 2*((Precision*Recall)/(Precision+Recall))
F1_score = np.round(F1_score,2)
print(F1_score)

"""Precision, Recall, F1 score (built in)"""

print(classification_report(np.argmax(test_Y,axis=1),np.argmax(model.predict(test_X),axis=1)))